// src/services/employees.ts
import { supabase } from "@/lib/supabase";
import type { Employee } from "@/types/employee";

/** Read all employees, ordered by name */
export async function fetchEmployees(): Promise<Employee[]> {
  const { data, error } = await supabase.from("employees").select("*").order("name");
  if (error) throw error;
  return (data || []) as Employee[];
}

/** Create employee (id is generated by Postgres) */
export async function addEmployee(e: Omit<Employee, "id">) {
  const { error } = await supabase.from("employees").insert({
    name: e.name,
    photo: e.photo,
    team: e.team,
    status: e.status,
    position: e.position,
    level: e.level,
  });
  if (error) throw error;
}

/** Update status */
export async function updateEmployeeStatus(id: string, status: Employee["status"]) {
  const { error } = await supabase.from("employees").update({ status }).eq("id", id);
  if (error) throw error;
}

/** Move to another team (drag & drop) */
export async function updateEmployeeTeam(id: string, team: string) {
  const { error } = await supabase.from("employees").update({ team }).eq("id", id);
  if (error) throw error;
}

/** (Optional) Patch fields */
export async function updateEmployee(id: string, patch: Partial<Employee>) {
  const { error } = await supabase.from("employees").update(patch).eq("id", id);
  if (error) throw error;
}

/** (Optional) Delete employee */
export async function deleteEmployee(id: string) {
  const { error } = await supabase.from("employees").delete().eq("id", id);
  if (error) throw error;
}
